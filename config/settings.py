"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 4.1.7.
"""

import os
# import dj_database_url
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# SECURITY WARNING: секретный ключ проекта указывается в файле .env
SECRET_KEY = os.environ.get('SECRET_KEY',)

# SECURITY WARNING: управление режимом DEBUG.
# По-умолчанию DEBUG = False, если иное не указано в файле .env
DEBUG = bool(os.environ.get('DEBUG', False))

ALLOWED_HOSTS = ['*',
                 '0.0.0.0',
                 'localhost',
                 '127.0.0.1',
                 ]
# CSRF_TRUSTED_ORIGINS = []
# X_FRAME_OPTIONS = '*'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # собираем статику с помощью whitenoise
    'whitenoise.runserver_nostatic',
    "bootstrap4",
    # модуль для работы с graphQL
    "graphene_django",
    # приложение mygraph
    "mygraph.apps.MygraphConfig",
    # django REST framework
    'rest_framework',
    # модуль для аутентификации по JWT
    'rest_framework_simplejwt',
]

# если включён DEBUG = True, то добавляет возможность
# показывать SQL запросы в django shell (shell_plus)
# за счёт подключения модуля django_extensions в INSTALLED_APPS
if DEBUG:
    INSTALLED_APPS.insert(0, 'django_extensions')
    SHELL_PLUS_PRINT_SQL = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # добавлен слой whitenoise для сбора статики
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # добавлен слой locale для локализации проекта
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
    }
}

# DATABASES['default'] = dj_database_url.config(
#     conn_max_age=600,
#     conn_health_checks=True,
# )

# DATABASES = {
#     "default": dj_database_url.config(conn_max_age=600)
# }


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Пути к папкам для файлов локализации

LOCALE_URL = "locale/"
LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'), )


# Пути для статики и медиафайлов Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Папка для фикстур по-умолчанию
FIXTURE_DIRS = ['fixtures']

# default login redirect url, if needed
# LOGIN_REDIRECT_URL = "/"

GRAPHENE = {
    "SCHEMA": "mygraph.schema.schema"
}

REST_FRAMEWORK = {
    'DEFAULT_RENDER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
