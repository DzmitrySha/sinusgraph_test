"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 4.1.7.
"""

import os
# import dj_database_url
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# SECURITY WARNING: секретный ключ проекта указывается в файле .env
SECRET_KEY = os.environ.get('SECRET_KEY',)

# SECURITY WARNING: управление режимом DEBUG.
# По-умолчанию DEBUG = False, если иное не указано в файле .env
DEBUG = bool(os.environ.get('DEBUG', False))

ALLOWED_HOSTS = ['*']
# CSRF_TRUSTED_ORIGINS = []
# X_FRAME_OPTIONS = '*'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # собираем статику с помощью whitenoise
    'whitenoise.runserver_nostatic',
    # модуль для аутентификации через keycloak
    'django_keycloak',
    # модуль для работы с graphQL
    "graphene_django",
    # приложение mygraph
    "mygraph.apps.MygraphConfig",
    # django REST framework
    'rest_framework',
    # модуль для аутентификации по JWT (simplejwt)
    # 'rest_framework_simplejwt',

]

# если включён DEBUG = True, то добавляет возможность
# показывать SQL запросы в django shell (shell_plus)
# за счёт подключения модуля django_extensions в INSTALLED_APPS
if DEBUG:
    INSTALLED_APPS.insert(0, 'django_extensions')
    SHELL_PLUS_PRINT_SQL = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # добавлен слой для работы модуля django-uw-keycloak
    'django_keycloak.middleware.KeycloakMiddleware',

    # добавлен слой whitenoise для сбора статики
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',

    # добавлен слой locale для локализации проекта
    'django.middleware.locale.LocaleMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
    }
}

# DATABASES['default'] = dj_database_url.config(
#     conn_max_age=600,
#     conn_health_checks=True,
# )

# DATABASES = {
#     "default": dj_database_url.config(conn_max_age=600)
# }


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Пути к папкам для файлов локализации

LOCALE_URL = "locale/"
LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'), )


# Пути для статики и медиафайлов Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

FIXTURE_DIRS = ['fixtures']  # Папка для фикстур по-умолчанию

# Конфиг для django_keycloak
AUTHENTICATION_BACKENDS = ('django_keycloak.backends.KeycloakAuthenticationBackend',)
AUTH_USER_MODEL = "django_keycloak.KeycloakUserAutoId"

# схема для  graphQL
GRAPHENE = {
    "SCHEMA": "mygraph.schema.schema"
}

# DRF settings
REST_FRAMEWORK = {
    # 'DEFAULT_RENDER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',
    #     'rest_framework.renderers.BrowsableAPIRenderer',
    # ],

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'django_keycloak.authentication.KeycloakAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}


# Конфигурация для django-uw-keycloak
KEYCLOAK_CONFIG = {
    # The Keycloak's Public Server URL (e.g. http://localhost:8282 for docker)
    'SERVER_URL': os.environ.get('SERVER_URL',),
    # The Keycloak's Internal URL
    # (e.g. http://keycloak:8282 for a docker service named keycloak)

    # Optional: Default is SERVER_URL
    'INTERNAL_URL': os.environ.get('SERVER_URL',),

    # Override for default Keycloak's base path
    # Default is '/auth/'
    'BASE_PATH': '/',
    # The name of the Keycloak's realm
    'REALM': os.environ.get('REALM',),
    # The ID of this client in the above Keycloak realm
    'CLIENT_ID': os.environ.get('CLIENT_ID',),
    # The secret for this confidential client
    'CLIENT_SECRET_KEY': os.environ.get('CLIENT_SECRET_KEY',),  # в файле .env
    # The name of the admin role for the client
    'CLIENT_ADMIN_ROLE': 'uma_protection',
    # The name of the admin role for the realm
    'REALM_ADMIN_ROLE': 'uma_protection',
    # Regex formatted URLs to skip authentication
    'EXEMPT_URIS': [],
    # Flag if the token should be introspected or decoded (default is False)
    'DECODE_TOKEN': False,
    # Flag if the audience in the token should be verified (default is True)
    'VERIFY_AUDIENCE': True,
    # Flag if the user info has been included in the token (default is True)
    'USER_INFO_IN_TOKEN': True,
    # Flag to show the traceback of debug logs (default is False)
    'TRACE_DEBUG_LOGS': False,
    # The token prefix that is expected in Authorization header (default is 'Bearer')
    'TOKEN_PREFIX': 'Bearer'
}


# Конфигурация для rest_framework_simplejwt

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
#     "ROTATE_REFRESH_TOKENS": False,
#     "BLACKLIST_AFTER_ROTATION": False,
#     "UPDATE_LAST_LOGIN": False,
#
#     "ALGORITHM": "HS256",
#     "SIGNING_KEY": SECRET_KEY,  # SECRET_KEY = os.environ.get('SECRET_KEY',)
#     "VERIFYING_KEY": "",
#     "AUDIENCE": None,
#     "ISSUER": None,
#     "JSON_ENCODER": None,
#     "JWK_URL": None,
#     "LEEWAY": 0,
#
#     "AUTH_HEADER_TYPES": ("Bearer",),
#     "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
#     "USER_ID_FIELD": "id",
#     "USER_ID_CLAIM": "user_id",
#     "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
#
#     "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
#     "TOKEN_TYPE_CLAIM": "token_type",
#     "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
#
#     "JTI_CLAIM": "jti",
#
#     "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
#     "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
#     "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
#
#     "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
#     "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
#     "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
#     "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
#     "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
#     "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
# }
